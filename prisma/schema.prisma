generator client {
  provider = "prisma-client-js"
  engineType = "library"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String   @unique 
  emailVerified Boolean
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts   Account[]
  sessions   Session[]
  audit_logs audit_logs[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
  @@index([userId])
  @@index([token]) 
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
  @@unique([providerId, accountId])
  @@index([userId])
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

model appointments {
  id             String            @id @default(cuid())
  clientId       String
  artistId       String
  scheduledDate  DateTime
  duration       Int
  status         AppointmentStatus
  type           AppointmentType
  notes          String?
  reminderSent   Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  tattoo_artists tattoo_artists    @relation(fields: [artistId], references: [id])
  clients        clients           @relation(fields: [clientId], references: [id])
}

model audit_logs {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  ip         String   @db.VarChar(45)
  userAgent  String   @db.VarChar(500)
  timestamp  DateTime @default(now())
  metadata   Json?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@index([userId])
}

model clients {
  id              String            @id @default(cuid())
  firstName       String
  lastName        String
  email           String            @unique
  phone           String
  dateOfBirth     DateTime
  emergencyName   String
  emergencyPhone  String
  emergencyRel    String
  allergies       String[]
  medicalConds    String[]
  preferredArtist String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  appointments    appointments[]
  tattoo_sessions tattoo_sessions[]
}

model tattoo_artists {
  id              String            @id @default(cuid())
  name            String
  email           String            @unique
  phone           String?
  specialties     String[]
  hourlyRate      Decimal
  isActive        Boolean           @default(true)
  portfolio       String[]
  bio             String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  appointments    appointments[]
  tattoo_designs  tattoo_designs[]
  tattoo_sessions tattoo_sessions[]
}

model tattoo_designs {
  id             String         @id @default(cuid())
  title          String
  description    String
  style          String
  tags           String[]
  imageUrl       String
  artistId       String
  isPublic       Boolean        @default(true)
  estimatedHours Decimal
  popularity     Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  tattoo_artists tattoo_artists @relation(fields: [artistId], references: [id])
}

model tattoo_sessions {
  id                String         @id @default(cuid())
  clientId          String
  artistId          String
  appointmentDate   DateTime
  duration          Int
  status            SessionStatus
  designDescription String
  placement         String
  size              String
  style             String
  referenceImages   String[]
  hourlyRate        Decimal
  estimatedHours    Decimal
  depositAmount     Decimal
  totalCost         Decimal
  paidAmount        Decimal
  notes             String?
  aftercareProvided Boolean        @default(false)
  consentSigned     Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  tattoo_artists    tattoo_artists @relation(fields: [artistId], references: [id])
  clients           clients        @relation(fields: [clientId], references: [id])
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AppointmentType {
  CONSULTATION
  TATTOO_SESSION
  TOUCH_UP
  REMOVAL
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}