generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String?
  email         String    @unique
  emailVerified Boolean?  @default(false)
  image         String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Session {
  id            String   @id @default(uuid())
  userId        String
  expiresAt     DateTime
  token         String   @unique
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}

model Account {
  id                        String    @id @default(uuid())
  userId                    String
  accountId                 String
  providerId                String
  type                      String    @default("credential")
  accessToken               String?   @db.Text
  refreshToken              String?   @db.Text
  accessTokenExpiresAt      DateTime?
  refreshTokenExpiresAt     DateTime?
  scope                     String?
  idToken                   String?   @db.Text
  password                  String?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  user                      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([providerId])
  @@unique([providerId, accountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model TattooArtist {
  id           String          @id @default(cuid())
  name         String
  email        String          @unique
  phone        String?
  specialties  String[]
  hourlyRate   Decimal
  isActive     Boolean         @default(true)
  portfolio    String[]
  bio          String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  appointments Appointment[]
  designs      TattooDesign[]
  sessions     TattooSession[]

  @@map("tattoo_artists")
}

model Client {
  id              String          @id @default(cuid())
  firstName       String
  lastName        String
  email           String          @unique
  phone           String
  dateOfBirth     DateTime
  emergencyName   String
  emergencyPhone  String
  emergencyRel    String
  allergies       String[]
  medicalConds    String[]
  preferredArtist String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  appointments    Appointment[]
  sessions        TattooSession[]

  @@map("clients")
}

model TattooSession {
  id                String        @id @default(cuid())
  clientId          String
  artistId          String
  appointmentDate   DateTime
  duration          Int
  status            SessionStatus
  designDescription String
  placement         String
  size              String
  style             String
  referenceImages   String[]
  hourlyRate        Decimal
  estimatedHours    Decimal
  depositAmount     Decimal
  totalCost         Decimal
  paidAmount        Decimal
  notes             String?
  aftercareProvided Boolean       @default(false)
  consentSigned     Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  artist            TattooArtist  @relation(fields: [artistId], references: [id])
  client            Client        @relation(fields: [clientId], references: [id])

  @@map("tattoo_sessions")
}

model Appointment {
  id            String            @id @default(cuid())
  clientId      String
  artistId      String
  scheduledDate DateTime
  duration      Int
  status        AppointmentStatus
  type          AppointmentType
  notes         String?
  reminderSent  Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  artist        TattooArtist      @relation(fields: [artistId], references: [id])
  client        Client            @relation(fields: [clientId], references: [id])

  @@map("appointments")
}

model TattooDesign {
  id             String       @id @default(cuid())
  title          String
  description    String
  style          String
  tags           String[]
  imageUrl       String
  artistId       String
  isPublic       Boolean      @default(true)
  estimatedHours Decimal
  popularity     Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  artist         TattooArtist @relation(fields: [artistId], references: [id])

  @@map("tattoo_designs")
}


model AuditLog {
  id         String    @id @default(cuid())
  userId     String?   // Nullable for anonymous actions
  action     String    // CREATE, READ, UPDATE, DELETE, LOGIN, LOGOUT, FAILED_LOGIN
  resource   String    // Table/resource name
  resourceId String?   // ID of the affected resource
  ip         String    @db.VarChar(45) // IPv6 compatible
  userAgent  String    @db.VarChar(500)
  timestamp  DateTime  @default(now())
  metadata   Json?     // Additional context data

  @@index([userId])
  @@index([resource])
  @@index([timestamp])
  @@index([action])
  @@map("audit_logs")
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AppointmentType {
  CONSULTATION
  TATTOO_SESSION
  TOUCH_UP
  REMOVAL
}

